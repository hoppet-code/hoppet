#name: Test Python Wheels
#
#on:
#  push:
#    branches: [ 2025-09-python-wheels-new ]
#
#jobs:
#  simple_test:
#    name: Simple Python Test
#    runs-on: ubuntu-latest
#    container:
#      image: fedora:latest
#    
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v4
#    
#    - name: Install dependencies
#      run: |
#        yum -y install gcc gcc-c++ gcc-gfortran cmake swig
#        yum -y install lhapdf lhapdf-devel
#        yum -y install python3-devel python3-pip
#    
#    - name: Build and test Python bindings
#      run: |
#        # Build Python wheel
#        python3 -m pip install build scikit-build-core
#        CMAKE_BUILD_PARALLEL_LEVEL=$(nproc) python3 -m build
#        
#        # Test wheel installation
#        python3 -m pip install dist/*.whl
#        python3 -c "import hoppet; print('Success!')"


name: Build Linux Wheels

on:
  push:
    branches: [ 2025-09-python-wheels-new ]
  release:
    types: [published]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.2
      env:
        # Build for Python 3.8-3.12
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
        
        # Skip 32-bit and musl builds
        CIBW_SKIP: "*-manylinux_i686 *-musllinux* *-win32"
        
        # Linux dependencies
        CIBW_BEFORE_BUILD_LINUX: |
          yum install -y gcc gcc-c++ gcc-gfortran cmake swig
          yum install -y lhapdf lhapdf-devel || echo "LHAPDF not available, continuing..."
          
          cmake -S . -B BUILD \
            -DHOPPET_ENABLE_FPES=ON \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DHOPPET_USE_EXACT_COEF=ON \
            -DBUILD_PYTHON_BINDINGS=ON \
            -DHOPPET_BUILD_BENCHMARK=OFF \
            -DHOPPET_BUILD_EXAMPLES=OFF \
            -DHOPPET_ENABLE_TESTING=OFF \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON
          cmake --build BUILD -j
          cmake --install BUILD
          ldconfig
        
        # macOS dependencies and build
        CIBW_BEFORE_BUILD_MACOS: |
          brew install gcc gfortran swig cmake make
          brew tap davidchall/hep
          brew install lhapdf || echo "LHAPDF install failed, continuing..."
          #ls /opt/homebrew/bin/g*

          # Remove ninja to force make
          brew uninstall ninja || echo "ninja not installed"

          cmake -S . -B BUILD \
            -DCMAKE_Fortran_COMPILER=gfortran-15 \
            -DCMAKE_INSTALL_PREFIX=$(pwd)/../INSTALL \
            -DHOPPET_ENABLE_FPES=ON \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DHOPPET_USE_EXACT_COEF=ON \
            -DBUILD_PYTHON_BINDINGS=ON \
            -DHOPPET_BUILD_BENCHMARK=OFF \
            -DHOPPET_BUILD_EXAMPLES=OFF \
            -DHOPPET_ENABLE_TESTING=OFF \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON
          cmake --build BUILD -j 2
          cmake --install BUILD

        # Simplified environment variables for macOS
        CIBW_ENVIRONMENT_MACOS: >
          CMAKE_BUILD_PARALLEL_LEVEL=2
          CMAKE_GENERATOR="Unix Makefiles"
          FC=/opt/homebrew/bin/gfortran-15
          CMAKE_Fortran_COMPILER=/opt/homebrew/bin/gfortran-15
          CC=/opt/homebrew/bin/gcc-15
          CXX=/opt/homebrew/bin/g++-15

        CIBW_ENVIRONMENT_LINUX: CMAKE_BUILD_PARALLEL_LEVEL=4
        
        # Use parallel compilation
        CIBW_ENVIRONMENT: CMAKE_BUILD_PARALLEL_LEVEL=4
        
        # Test the built wheels
        CIBW_TEST_COMMAND: |
          python -c "import hoppet; print('Hoppet import successful for {platform}!')"
          python {project}/example_py/tabulation_example.py
        
        CIBW_TEST_REQUIRES: numpy
        CIBW_BUILD_VERBOSITY: 1
        
        # Repair wheels (different tools for different platforms)
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
        CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel -w {dest_dir} {wheel}"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Build sdist
      run: |
        pip install build
        python -m build --sdist
        
    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  upload_test_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/2025-09-python-wheels-new' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true
        
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true

#jobs:
#  build_linux_wheels:
#    name: Build Linux wheels
#    runs-on: ubuntu-latest
#    
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v4
#      with:
#        submodules: recursive
#    
#    - name: Build wheels
#      uses: pypa/cibuildwheel@v2.16.2
#      env:
#        # Build for Python 3.8-3.12 on Linux
#        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
#        
#        # Skip 32-bit and musl builds (you can add them later if needed)
#        CIBW_SKIP: "*-manylinux_i686 *-musllinux*"
#        
#        # Install system dependencies needed for hoppet
#        CIBW_BEFORE_BUILD_LINUX: |
#          yum install -y gcc gcc-c++ gcc-gfortran cmake swig
#          yum install -y lhapdf lhapdf-devel || echo "LHAPDF not available, continuing..."
#          
#          # Build the main hoppet library with -fPIC
#          cmake -S . -B BUILD \
#            -DHOPPET_ENABLE_FPES=ON \
#            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
#            -DHOPPET_USE_EXACT_COEF=ON \
#            -DHOPPET_BUILD_PYINTERFACE=ON \
#            -DCMAKE_POSITION_INDEPENDENT_CODE=ON
#          cmake --build BUILD -j
#          cmake --install BUILD
#          ldconfig
#        
#        # Use parallel compilation for the Python wheel build
#        CIBW_ENVIRONMENT: CMAKE_BUILD_PARALLEL_LEVEL=4
#        
#        # Test the built wheels with both import and example
#        CIBW_TEST_COMMAND: |
#          python -c "import hoppet; print('Hoppet import successful for {platform}!')"
#          python {project}/example_py/tabulation_example.py
#        
#        # Increase verbosity for debugging
#        CIBW_BUILD_VERBOSITY: 1
#        
#        # Set repair wheel command (bundles shared libraries)
#        CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
#
#    - name: Upload artifacts
#      uses: actions/upload-artifact@v4
#      with:
#        name: linux-wheels
#        path: ./wheelhouse/*.whl
#
#  build_sdist:
#    name: Build source distribution
#    runs-on: ubuntu-latest
#    
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v4
#      with:
#        submodules: recursive
#        
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: '3.10'
#        
#    - name: Build sdist
#      run: |
#        pip install build
#        python -m build --sdist
#        
#    - name: Upload sdist
#      uses: actions/upload-artifact@v4
#      with:
#        name: sdist
#        path: dist/*.tar.gz
#
## Upload to TestPyPI on pushes to main/master
#  upload_test_pypi:
#    needs: [build_linux_wheels, build_sdist]
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/2025-09-python-wheels-new' || github.ref == 'refs/heads/master'
#    
#    steps:
#    - name: Download all artifacts
#      uses: actions/download-artifact@v4
#      with:
#        path: dist
#        merge-multiple: true
#        
#    - name: Publish to TestPyPI
#      uses: pypa/gh-action-pypi-publish@release/v1
#      with:
#        repository-url: https://test.pypi.org/legacy/
#        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
#        skip-existing: true  # Don't fail if version already exists
#  # Optional: Upload to PyPI on releases
#  #upload_pypi:
#  #  needs: [build_linux_wheels, build_sdist]
#  #  runs-on: ubuntu-latest
#  #  if: github.event_name == 'release' && github.event.action == 'published'
#  #  
#  #  steps:
#  #  - name: Download all artifacts
#  #    uses: actions/download-artifact@v4
#  #    with:
#  #      path: dist
#  #      merge-multiple: true
#  #      
#  #  - name: Publish to PyPI
#  #    uses: pypa/gh-action-pypi-publish@release/v1
#  #    with:
#  #      password: ${{ secrets.PYPI_API_TOKEN }}
